[1,"id_odsp"]
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(distinct(id_osdp))
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(distinct("id_osdp"))
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(id_osdp)
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(id_odsp)
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(link_id_odsp)
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(link_odsp)
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(date,ht,at)
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
distinct(select(date,ht,at))
shots%>%
filter(location=="Not Recorded" & is_goal=="Not Goal") %>%
left_join(matches,by="id_odsp") %>%
select(date,ht,at) %>%
distinct()
events%>%
filter(id_odsp=="QFlLd2b0/")
events%>%
filter(id_odsp=="QFlLd2b0/") >%>
View()
events%>%
filter(id_odsp=="QFlLd2b0/") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/"&"event_type"=="Attempt") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/" & "event_type"=="Attempt") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/" & event_type=="Attempt") %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/" & event_type=="Attempt") %>%
group_by(side) %>%
summarize(n())
View()
events%>%
filter(id_odsp=="QFlLd2b0/" & event_type=="Attempt" & side=="Home") %>%
select(time,text) %>%
View()
events%>%
filter(id_odsp=="QFlLd2b0/" & event_type=="Attempt" & side=="Home") %>%
select(time,text,location) %>%
View()
X<-matrix(rnorm(2e+07,0,1),10^7,2)
y<-rnorm(10^7,0,1)
out<-t(X)%*%y
system.time(t(X)%*%y)
system.time(crossprod(X,y))
View(out)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
# or devtools::install_local('IRkernel-master.tar.gz')
IRkernel::installspec()  # to register the kernel in the current R installation
library(IRkernel)
install.packages(spdep)
install.packages("spdep)
install.packages("spdep")
install.packages("spdep")
x = 1
x=c(0,1,1,1,2,3)
mean<-mean(x)
sd<-sqrt(sum((x-mean(x))^2)/length(x))
med<-median(x)
error<-sum((x-mean))
central1<-error/length(x)
skew<-central1^3/sd^3
sum(x-mean)
sum(x-mean)
suma=0
for (i in 1:length(x)){
suma=suma+(x[i]-mean(x))
}
central1<-error/length(x)
central1<-sum((x-mean)^2)/length(x)
skew<-sum((x-mean)^3)/sd^3
kurt<-sum((x-mean)^4)/sd^4
skew<-sum((x-mean)^3)/length(x)/sd^3
kurt<-sum((x-mean)^4)/length(x)/sd^4
?polyroot
polyroot(-1,-3,1)
polyroot(c(-1,-3,1))
polyroot(c(1,-3,-1))
15/10
1.5*300
450/60
library(tidyverse)
library(readr)
matches <- read_csv("C:/Users/Administrador.000/Desktop/Sebastian/Code/Whoscored/CSV/La Liga/2012-2013/matches.csv")
View(matches)
x<-"josÃ¨"
x
Sys.getlocale()
aaaa
x<-1
eeeee
install.packages("magritrr")
1/1.2
1/6.75
1/14
a<-1/1.2
b<-1/6.75
c<-1/14
a+b+c
d<-a+b+c
a/d
b/d
c/d
a/d+b/d+c/d
source("../rfunctions/functions.R")
source("../rfunctions/functions.R")
source("../rfunctions/functions.R")
library(tidyverse)
library(MASS)
library(rpart)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(klaR)
library(e1071)
source("r/functions.R")
library(tidyverse)
library(MASS)
library(rpart)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(klaR)
library(e1071)
source("r/functions.R")
library(tidyverse)
library(MASS)
library(rpart)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(klaR)
library(RColorBrewer)
library(e1071)
source("r/functions.R")
dataset<-read_csv("data/diabetes.txt",col_names=c("timespreg","plaglu",
"diastolic","triceps",
"serum","bmi","diabped",
"age","diabetes"))
dataset$diabetes<-factor(dataset$diabetes,levels=c(0,1)
,labels = c("No","Yes"))
library(tidyverse)
library(MASS)
library(rpart)
library(class)
library(modelr)
library(caret)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(klaR)
library(e1071)
source("r/functions.R")
#####LOAD DATA####
dataset<-read_csv("data/diabetes.txt",col_names=c("timespreg","plaglu",
"diastolic","triceps",
"serum","bmi","diabped",
"age","diabetes"))
####EXPLORATORY ANALYSIS####
##histograms
plotlist<-multiplehist(dataset)
ggsave("plots/histograms.png",
multiplot(plotlist = plotlist,cols=3),width=8,height=4)
###seems to be too many values with 0 in some variables
##check missing
colSums(is.na(dataset))
colSums(dataset==0)
###triceps and serum have too many missing as 0
##transform diabetes to factor
dataset$diabetes<-factor(dataset$diabetes,levels=c(0,1)
,labels = c("No","Yes"))
###outliers
normdata<-as.data.frame(scale(dataset[,-9]))
normalize[,-7] %>%
gather(timespreg:age,key=var,value=value) %>%
ggplot()+geom_boxplot(aes(x=var,y=value))
##correlation of variables
corr<-as.data.frame(cor(dataset[,-9])) %>%
rownames_to_column(var = "var1") %>%
gather(timespreg:age,key = var2,value = value)
corrplot<-ggplot(data=corr,aes(x=var1, y=var2,fill=value))+geom_tile()+
geom_text(aes(label=round(value,2)),color="white")
ggsave("plots/corrplot.png",corrplot,width = 8,height = 4)
write_csv(as.data.frame(cor(dataset[,-9])),"correlation.csv")
##remove rows with missing values and columns with too many missing values
finaldataset<-dataset[dataset$plaglu!=0,]
finaldataset<-finaldataset[finaldataset$bmi!=0,]
finaldataset<-finaldataset[,c(-4,-5)]
##count of diabetes
table(finaldataset$diabetes)
county<-ggplot()+geom_bar(data=finaldataset,aes(x=diabetes),stat="count")
ggsave("plots/diabetes.png",county,width = 8,height = 4)
##replace missing values with mean in diastolic
diastolic<-dataset[dataset$diastolic!=0,]
mu<-mean(diastolic$diastolic)
finaldataset<-mutate(finaldataset,diastolic=ifelse(diastolic==0,mu,diastolic))
rm(diastolic)
##standardize variables
normalize<-as.data.frame(scale(finaldataset[,-7]))
normalize$diabetes<-finaldataset$diabetes
####DATASET PARTITION####
##sample partition
set.seed(1234)
trainidx<-createDataPartition(y = finaldataset$diabetes,
list = FALSE,p = 0.7)
train<-finaldataset[trainidx,]
notrain<-finaldataset[-trainidx,]
set.seed(1234)
testidx<-createDataPartition(y=notrain$diabetes,list=FALSE,p=0.5)
test<-notrain[testidx,]
validate<-notrain[-testidx,]
normtrain<-normalize[trainidx,]
normnotrain<-normalize[-trainidx,]
normtest<-normnotrain[testidx,]
normvalidate<-normnotrain[-testidx,]
##check means
table(train$diabetes)/nrow(train)
table(test$diabetes)/nrow(test)
table(validate$diabetes)/nrow(validate)
####MODELS####
####DECISION TREE#####
#define tree with function defaults:
#gini as splitting criteria, priors defined by sample,
#loss with value 1
#20 as minimum obs for a node to be splitted
#20/3 as minimum obs in a terminal node
#0.01 as minimum increase of fit for a split to be performed
dtree<-rpart(diabetes~.,data=train,method="class")
summary(dtree)
plot(dtree,margin=0.2)
text(dtree,all=TRUE,use.n = TRUE,cex=0.5)
dtree.pred<-predict(dtree,validate,type = "class")
dtree.out<-confusionMatrix(data=dtree.pred,reference = validate$diabetes,positive="Yes")
dtree.out
#73.21
##print results of 10-fold cross validation
#search for the tree with the lowest xerror and then choose
#the tree with the lowest number of splits within 1 sd
printcp(dtree)
plotcp(dtree)
dtree.prune<-prune(dtree,cp = 0.02)
fancyRpartPlot(dtree.prune)
plot(dtree.prune,margin=0.2)
text(dtree.prune,all=TRUE,use.n = TRUE,cex=0.5)
dtree.prune.pred<-predict(dtree.prune,validate,type="class")
dtree.prune.out<-confusionMatrix(data=dtree.prune.pred,reference = validate$diabetes,positive="Yes")
dtree.prune.out
#77.68
##with tree package
dtree2<-tree(diabetes~.,data=train,method = "class")
summary(dtree2)
plot(dtree2)
text(dtree2,pretty=0)
##prediction on test dataset
dtree2.pred<-predict(dtree2,validate,type="class")
dtree2.out<-confusionMatrix(data=dtree2.pred,reference=validate$diabetes,positive="Yes")
#77.68
##crossvalidation to find minimum error tree
cv.dtree2<-cv.tree(dtree2,FUN=prune.misclass)
cv.dtree2
###best tree with 3 nodes
##best model with 3 nodes
dtree2.prune<-prune.misclass(dtree2,best=3)
summary(dtree.prune)
plot(dtree.prune)
text(dtree.prune,pretty=0)
##prediction on test dataset
dtree2.prune.pred<-predict(dtree2.prune,validate,type="class")
dtree2.prune.out<-confusionMatrix(data=dtree2.prune.pred,reference=validate$diabetes,positive="Yes")
#77.68
#####KNN NORMALIZED#####
knn.pred<-list()
knn.missrate<-c()
for (i in 1:25){
a<-knn(train = normtrain[,-7],test=normvalidate[,-7],k = i,cl=normtrain$diabetes)
knn.pred[[i]]<-a
knn.missrate[i]<-mean(ifelse(knn.pred[[i]]==normvalidate$diabetes,FALSE,TRUE))
}
k<-c(1:25)
names(knn.pred)<-paste("K=",c(1:25),sep="")
knn.plot<-ggplot()+geom_line(aes(x=k,y=knn.missrate))
ggsave("plots/knnplot.jpg",knn.plot,width=8,height=4)
which.min(knn.missrate)
###lowest missclassification with k=7
knn.out<-confusionMatrix(data=knn.pred[[7]],reference=normvalidate$diabetes,positive="Yes")
#77.68
#####NAIVE BAYES####
#73.21
##separate variables in x and y
naivetrain<-train[,-7]
naivelabels<-train$diabetes
naive
naive<-train(naivetrain,naivelabels,"nb",trControl=trainControl(method="cv",number=10))
naive.pred<-predict(naive,newdata = validate)
naive.out<-confusionMatrix(data=naive.pred,reference=validate$diabetes,positive="Yes")
###LOGIT###
#80.36
logit<-glm(diabetes~.,data=train,family=binomial(link=logit))
summary(logit)
logit.pred<-predict(logit,newdata = validate,type="response")
logit.pred.class<-ifelse(logit.pred>0.5,"Yes","No")
logit.out<-confusionMatrix(data=logit.pred.class,reference=validate$diabetes,positive="Yes")
#####COMPARISON####
confmodels<-list(dtree.prune.out,
knn.out,naive.out)
modelnames<-c("Decision Tree Prune","KNN",
"Naive Bayes")
comp<-comparisondf(confmodels,modelnames)
complot<-ggplot(data=comp,aes(x=Model,y=Accuracy))+geom_col(fill="green4")
ggsave("plots/accuracy.jpg",complot,width=8,height=4)
dplyr::select(comp,c(Model,Accuracy,Specificity,Sensitivity)) %>%
gather(Accuracy,Specificity,Sensitivity,key=measure,value=value) %>%
ggplot()+geom_line(aes(x=measure,y=value,color=Model,group=Model))
source('C:/Users/Administrador.000/Desktop/Sebastian/Repos/diabetes/script.R', echo=TRUE)
library(tidyverse)
data<-read_csv("C:/Users/Administrador.000/Desktop/Sebastian/Bases de Datos/football-events/events.csv")
library(tidyverse)
library(ggrepel)
data<-read_csv("C:/Users/Administrador.000/Desktop/Sebastian/Bases de Datos/football-events/events.csv")
setwd("C:/Users/Administrador.000/Desktop/Sebastian/Data Science For Management/Pattern Recognition/hackathon3")
rm(data)
read_csv("dataSet.csv")
data<-read_csv2("dataSet.csv")
View(data)
View(data)
colSums(is.na(data))
colSums(data==0)
which(colnames(data)=="EURUSDVolume")
data.corn<- data %>%
select(starts_with("Corn"))
data.corn
colSums(is.na(data))
cor(data[2:74])
View(cor(data[2:74]))
View(cor(data.corn))
mean(c(data.corn$CornClose,data.corn$CornHigh,
data.corn$CornLow,data.corn$CornOpen))
data.corn<- data %>%
select(starts_with("Corn"))
View(data.corn)
View(data.corn)
data.corn<- data %>%
select(starts_with("Corn")) %>%
mutate(avg=mean(c(CornClose,CornHigh,CornLow,CornOpen)))
data.corn<- data %>%
select(starts_with("Corn")) %>%
mutate(avg=(CornClose+CornHigh+CornLow+CornOpen)/4))
data.corn<- data %>%
select(starts_with("Corn")) %>%
mutate(avg=(CornClose+CornHigh+CornLow+CornOpen)/4)
data.corn<- data %>%
select(starts_with("Corn")) %>%
mutate(avg=(CornClose+CornHigh+CornLow)/3)
data.corn<- data %>%
select(starts_with("Corn"))
colSums(data==0)
View(data)
View(data)
cor(data.corn)
View(cor(data.corn))
data.corn<- data %>%
select(ends_with("Close"))
data.corn<- data %>%
select(starts_with("Corn"))
data.close <- data %>%
select(ends_with("Close"))
View(cor(data.close))
data.close <- data %>%
select(DataTimesStamp,ends_with("Close"))
data.close <- data %>%
select(DataTimestamp,ends_with("Close"))
data<-read_csv2("dataSet.csv",col_types = col_date(DataTimestamp))
data<-read_csv2("dataSet.csv",col_types = DataTimestamp=col_date())
data<-read_csv2("dataSet.csv",col_types = cols(DataTimestamp=col_date())
colSums(is.na(data))
colSums(data==0)
which(colnames(data)=="EURUSDVolume")
data.corn<- data %>%
select(starts_with("Corn"))
cor(data.corn)
View(cor(data.corn))
data.close <- data %>%
select(DataTimestamp,ends_with("Close")) %>%
add_columns()
View(cor(data.close))
ggplot()+geom_line(data=data,aes())
data<-read_csv2("dataSet.csv",col_types = cols(DataTimestamp=col_date()))
parse_date(data$DataTimestamp)
data<-read_csv2("dataSet.csv"))
data<-read_csv2("dataSet.csv")
parse_date(data$DataTimestamp)
as.Date(df$DataTimestamp, "%d/%m/%Y)
View(cor(data.close))
ggplot()+geom_line(data=data,aes())
as.Date(df$DataTimestamp, "%d/%m/%Y")
as.Date(df$DataTimestamp, "%d/%m/%Y")
library(lubridate)
str(df$DataTimestamp)
as.Date(data$DataTimestamp, "%d/%m/%Y")
as.Date(data$DataTimestamp, "%d-%m-%Y")
as.Date(data$DataTimestamp, "%d-%m-%Y")
dmy(data$DataTimestamp)
data$DataTimestamp<-dmy(data$DataTimestamp)
ggplot()+geom_line(data=data,aes(x=DataTimestamp,y=CornClose))
data.close <- data %>%
select(DataTimestamp,ends_with("Close")) %>%
ggplot()+geom_line(data=data,aes(x=DataTimestamp,y=CornClose))
data.close <- data %>%
select(DataTimestamp,ends_with("Close")) %>%
ggplot()+geom_line(data=data,aes(x=DataTimestamp,y=CornClose))
data.close <- data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value)
ggplot()+geom_line(data=data,aes(x=DataTimestamp,y=value,color=var))
ggplot()+geom_line(data=data.close,aes(x=DataTimestamp,y=value,color=var))
data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" & var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=DataTimestamp,y=value,color=var))
data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" & var=="EURUSDClose")
data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value)
data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" | var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=DataTimestamp,y=value,color=var))
data.close<-data %>%
select(DataTimestamp,ends_with("Close"))
scale(data.close[2:7])
data.close.std<-as.data.frame(scale(data.close[2:7]))
data.close.std$Date<-data$DataTimestamp
data.close.std<-data %>%
select(DataTimestamp,ends_with("Close")) %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" | var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=DataTimestamp,y=value,color=var))
data.close.std<-as.data.frame(scale(data.close[2:7]))
data.close.std$Date<-data$DataTimestamp
data.close.std  %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" | var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=DataTimestamp,y=value,color=var))
data.close.std  %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" | var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=Date,y=value,color=var))
data.close.std  %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="BrentClose" | var=="SP500Close") %>%
ggplot()+geom_line(aes(x=Date,y=value,color=var))
data.close.std  %>%
gather(CornClose:BrentClose,key=var,value=value) %>%
filter(var=="WheatClose" | var=="EURUSDClose") %>%
ggplot()+geom_line(aes(x=Date,y=value,color=var))
colSums(data==0)
filter(data,SoybeanReturnsT1==0)
View(filter(data,SoybeanReturnsT1==0))
summary(data.close.std)
summary(data)
