select(-starts_with("EURUSD"),-ends_with("High"),
-ends_with("Low"),-ends_with("Open"),-ends_with("TP"),
-ends_with("VRR"),-ends_with("Mexp")) %>%
filter(ClassNextDay=="Up" | ClassNextDay=="Down")
test.filter<-test.norm %>%
select(-starts_with("EURUSD"),-ends_with("High"),
-ends_with("Low"),-ends_with("Open"),-ends_with("TP"),
-ends_with("VRR"),-ends_with("Mexp")) %>%
filter(ClassNextDay=="Up" | ClassNextDay=="Down")
training.filter  %>%
gather(CornClose:BrentRSI,key=var,value=value) %>%
ggplot()+geom_boxplot(aes(x=var,y=value))+coord_flip()
timeslices<-createTimeSlices(1:nrow(training.filter),
initialWindow = 1000,horizon =406,
fixedWindow = FALSE)
fitcontrol<-trainControl(method = "cv",
index = timeslices$train,
indexOut= timeslices$test,
allowParallel = TRUE,
classProbs = TRUE,
savePredictions = TRUE,
returnResamp = "all",
verboseIter = TRUE)
nngrid<-expand.grid(list(size=c(1:5),
decay=c(0.001,0.01,0.1,1)))
fitcontrol<-trainControl(method = "cv",
index = timeslices$train,
indexOut= timeslices$test,
allowParallel = TRUE,
classProbs = TRUE,
savePredictions = TRUE,
returnResamp = "all",
verboseIter = TRUE)
model1<-glm(ClassNextDay~.-DataTimestamp,data=training.filter,
family="binomial"(link="logit"))
summary(model1)
stepwise1<-step(model1)
summary(stepwise1)
neural2<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="nnet",
trControl=fitcontrol,tuneGrid=nngrid)
neural2
rsnns1<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid1,
learnFunc="Std_Backpropagation")
rsnnsgrid1<-expand.grid(layer1=c(1:5),layer2=c(0),layer3=c(0))
rsnns1<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid1,
learnFunc="Std_Backpropagation")
rsnns15<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+SoybeanReturnsT1+
SP500ReturnsT+SP500ReturnsT2+SP500RSI+
BrentReturnsT1+BrentReturnsT2
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid1,
learnFunc="Std_Backpropagation")
rsnns1<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid1,
learnFunc="Std_Backpropagation")
rsnns15
rsnns1
400/1665
boxplot<-training.filter  %>%
gather(CornClose:BrentRSI,key=var,value=value) %>%
ggplot()+geom_boxplot(aes(x=var,y=value))+coord_flip()
ggsave(boxplot,"plots/boxplot.jpg")
boxplot<-training.filter  %>%
gather(CornClose:BrentRSI,key=var,value=value) %>%
ggplot()+geom_boxplot(aes(x=var,y=value))+coord_flip()
ggsave("plots/botxplot.jpg",boxplot)
ggsave("plots/botxplot.jpg",boxplot)
set.seed(1234)
neural2<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="nnet",
trControl=fitcontrol,tuneGrid=nngrid)
neural2
summary(stepwise1)
set.seed(1234)
rsnns1<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid1,
learnFunc="Std_Backpropagation")
rsnns2<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid2,
learnFunc="Std_Backpropagation")
rsnnsgrid1<-expand.grid(layer1=c(1:5),layer2=c(0),layer3=c(0))
rsnnsgrid2<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(0))
rsnnsgrid3<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(1:5))
rsnnsgrid11<-expand.grid(layer1=c(1:5),layer2=c(0),layer3=c(0),decay=c(0.001,0.01,0.1,1))
rsnnsgrid22<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(0),decay=c(0.001,0.01,0.1,1))
rsnnsgrid33<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(1:5),decay=c(0.001,0.01,0.1,1))
set.seed(1234)
rsnns2<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid2,
learnFunc="Std_Backpropagation")
set.seed(1234)
set.seed(1234)
rsnns3<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid3,
learnFunc="Std_Backpropagation")
set.seed(1234)
rsnns11<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid11,
learnFunc="Std_Backpropagation")
set.seed(1234)
rsnns22<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid22,
learnFunc="Std_Backpropagation")
warnings()
set.seed(1234)
rsnns33<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid33,
learnFunc="Std_Backpropagation")
set.seed(1234)
rsnns3<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpML",
trControl=fitcontrol,tuneGrid=rsnnsgrid3,
learnFunc="Std_Backpropagation")
set.seed(1234)
rsnns33<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid33,
learnFunc="Std_Backpropagation")
svmradial<-expand.grid(C=c(0.001,0.1,0.25,0.5,1),sigma=c(0.001,0.002,0.005,0.01))
set.seed(1234)
svm1<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="svmRadialSigma",
trControl=fitcontrol)
svmlinear<-expand.grid(C=c(0.01,0.1,0.5,1,2))
set.seed(1234)
svm2<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="svmRadialSigma",
trControl=fitcontrol,tuneGrid=svmradial)
svmlinear<-expand.grid(C=c(0.01,0.1,0.5,1,2))
set.seed(1234)
svm3<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="svmLinear",
trControl=fitcontrol,tuneGrid=svmlinear)
set.seed(1234)
svm4<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="svmPoly",
trControl=fitcontrol)
results<-resamples(list(BFGSNN=neural2,NN1Layer=rsnns1,NN2Layer=rsnns2,
NN3Layer=rsnns3,NN1LayerDecay=rsnns11,NN2LayerDecay=rsnns22,
NN3LayerDecay=rsnns33,SVMRad=svm1,SVMRadGrid=svm2,
SVMLinear=svm3,SVMPoly=svm4))
summary(results)
svm25.pred<-predict(object = BFGSNN,newdata = test.filter)
svm25.pred<-predict(object = neural2,newdata = test.filter)
caret::confusionMatrix(svm25.pred,test.filter$ClassNextDay,positive="Up")
svm25.pred<-predict(object = svm1,newdata = test.filter)
caret::confusionMatrix(svm25.pred,test.filter$ClassNextDay,positive="Up")
svm.radial
svm1
summary(results)
svm25.pred<-predict(object = neural2,newdata = test.filter)
caret::confusionMatrix(svm25.pred,test.filter$ClassNextDay,positive="Up")
svm25.pred<-predict(object = svm1,newdata = test.filter)
caret::confusionMatrix(svm25.pred,test.filter$ClassNextDay,positive="Up")
svm1.pred<-predict(object = svm1,newdata = test.filter)
models<-list(rsnns1,rsnns2,rsnns3,rsnns11,rsnns22,rsnns33,svm1,svm2,svm3,svm4)
models[1]$pred
models[[1]]$pred
models[[1]]$resample
models[[2]]$resample
names(models[1])
names(models[[1]])
names(models[1])
models<-list(list(BFGSNN=neural2,NN1Layer=rsnns1,NN2Layer=rsnns2,
NN3Layer=rsnns3,NN1LayerDecay=rsnns11,NN2LayerDecay=rsnns22,
NN3LayerDecay=rsnns33,SVMRad=svm1,SVMRadGrid=svm2,
SVMLinear=svm3,SVMPoly=svm4))
names(models[1])
names(models[[1]])
names(models[[1]][1])
for (i in 1:length(models)){
df<-models[[i]]$resample
write_csv(df,paste("output/",names(models[[1]][i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/",names(models[[1]][i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[[1]][i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[[1]][i]),".csv",sep=""))
print(names(models[[1][i]]))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[[1]][i]),".csv",sep=""))
print(names(models[[1]][i]))
}
length(models)
length(models[1])
length(models[[1]])
for (i in 1:length(models[[1]])){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[[1]][i]),".csv",sep=""))
print(names(models[[1]][i]))
}
models[[1]][2]
models[[1]]
models[[1]]$resample
models[[1]][1]$resample
models[[1]][2]$resample
models[[1]]
models<-list(BFGSNN=neural2,NN1Layer=rsnns1,NN2Layer=rsnns2,
NN3Layer=rsnns3,NN1LayerDecay=rsnns11,NN2LayerDecay=rsnns22,
NN3LayerDecay=rsnns33,SVMRad=svm1,SVMRadGrid=svm2,
SVMLinear=svm3,SVMPoly=svm4))
models<-list(BFGSNN=neural2,NN1Layer=rsnns1,NN2Layer=rsnns2,
NN3Layer=rsnns3,NN1LayerDecay=rsnns11,NN2LayerDecay=rsnns22,
NN3LayerDecay=rsnns33,SVMRad=svm1,SVMRadGrid=svm2,
SVMLinear=svm3,SVMPoly=svm4)
models[1]
models[[1]]
names(models[1])
length(models)
models[1]$resample
models[[1]]$resample
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[1]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$pred)
write_csv(df,paste("output/resamples",names(models[i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$pred)
write_csv(df,paste("output/pred",names(models[i]),".csv",sep=""))
}
results<-resamples(models)
summary(results)
read_csv("output/resamples-SVMRad.csv")
read_csv("output/resamplesSVMRad.csv")
read_csv("output/resamplesSVMRad.csv") %>%
group_by(C,sigma) %>%
summarize(mean=mean(Accuracy)) %>%
arrange(desc(mean))
read_csv("output/resamplesSVMRad.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
summary(results)
read_csv("output/resamplesSVMRad.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN1Layer.csv") %>%
group_by(C,sigma)
read_csv("output/resamplesNN1Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMRadGrid.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMPoly.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMPoly.csv") %>%
group_by(C,degree,scale) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN1LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN1LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
rsnns11<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,
learnFunc="Std_Backpropagation")
rsnns11
results<-resamples(models)
summary(results)
rsnnsgrid11<-expand.grid(layer1=c(1:5),layer2=c(0),layer3=c(0),decay=c(0.001,0.005,0.01,0.05,0.1))
rsnnsgrid22<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(0),decay=c(0.001,0.005,0.01,0.05,0.1))
rsnnsgrid33<-expand.grid(layer1=c(1:5),layer2=c(1:5),layer3=c(1:5),decay=c(0.001,0.005,0.01,0.05,0.1))
rsnns11<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid11,
learnFunc="Std_Backpropagation")
set.seed(1234)
rsnns11<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid11,
learnFunc="Std_Backpropagation")
rsnns22<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid22,
learnFunc="Std_Backpropagation")
rsnns22
rsnns33<-caret::train(ClassNextDay~SoybeanClose+SoybeanVolume+CornReturnsT+
SoybeanReturnsT+WheatReturnsT+SP500RSI+
BrentReturnsT1
,data=training.filter,method="mlpWeightDecayML",
trControl=fitcontrol,tuneGrid=rsnnsgrid33,
learnFunc="Std_Backpropagation")
models<-list(BFGSNN=neural2,NN1Layer=rsnns1,NN2Layer=rsnns2,
NN3Layer=rsnns3,NN1LayerDecay=rsnns11,NN2LayerDecay=rsnns22,
NN3LayerDecay=rsnns33,SVMRad=svm1,SVMRadGrid=svm2,
SVMLinear=svm3,SVMPoly=svm4)
summary(results)
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$pred)
write_csv(df,paste("output/pred",names(models[i]),".csv",sep=""))
}
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMPoly.csv") %>%
group_by(C,degree,scale) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$resample)
write_csv(df,paste("output/resamples",names(models[i]),".csv",sep=""))
}
for (i in 1:length(models)){
df<-as.data.frame(models[[i]]$pred)
write_csv(df,paste("output/pred",names(models[i]),".csv",sep=""))
}
summary(results)
read_csv("output/resamplesNN1Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN1Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3Layer.csv") %>%
group_by(layer1,layer2,layer3) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN1LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN2LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesNN3LayerDecay.csv") %>%
group_by(layer1,layer2,layer3,decay) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMPoly.csv") %>%
group_by(C,degree,scale) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMRad.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMLinear.csv") %>%
group_by(C) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMPoly.csv") %>%
group_by(C,degree,scale) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
read_csv("output/resamplesSVMRad.csv") %>%
group_by(C,sigma) %>%
summarize(Acc=mean(Accuracy)) %>%
arrange(desc(Acc))
summary(results)
svm1.pred<-predict(object = svm1,newdata = test.filter)
caret::confusionMatrix(svm25.pred,test.filter$ClassNextDay,positive="Up")
summary(results)
